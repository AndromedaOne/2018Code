// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4905.Galaktika;

import org.usfirst.frc4905.Galaktika.commands.*;
import org.usfirst.frc4905.Galaktika.commands.ElevatorMoveGroundLevel;
import org.usfirst.frc4905.Galaktika.commands.ElevatorMoveHighScale;
import org.usfirst.frc4905.Galaktika.commands.ElevatorMoveLowScale;
import org.usfirst.frc4905.Galaktika.commands.ElevatorMoveSwitch;

import Utilities.*;

import Utilities.*;
import Utilities.ControllerButtons.ButtonsEnumerated;
import Utilities.ControllerButtons.ButtonsEnumerated;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	//// CREATING BUTTONS
	// One type of button is a joystick button which is any button on a joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = ButtonsEnumerated.<button>.getJoystickButton(stick);

	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.

	//// TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:

	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());

	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());

	// Start the command when the button is released  and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());


	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public Joystick driveController;
	public JoystickButton runIntakeButton;
	public JoystickButton elevatorMoveExchangeButton;
	public JoystickButton elevatorMoveSwitchButton;
	public JoystickButton elevatorMoveGroundLevelButton;
	public JoystickButton elevatorMoveLowScaleButton;
	public JoystickButton elevatorMoveHighScaleButton;
	public Joystick subsystemController;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public JoystickButton encoderPIDButton;
	JoystickButton TurnToEast;
	JoystickButton TurnToWest;
	JoystickButton TurnToNorth;
	JoystickButton TurnToSouth;

	public JoystickButton liftLeftRampButton;
	public JoystickButton liftRightRampButton;

	public OI() {
		//Button Presets for compass headings



		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveController = new Joystick(0);
		subsystemController = new Joystick(1);
		TurnToWest = new JoystickButton(driveController, ButtonsEnumerated.XBUTTON.getValue());
		TurnToEast = new JoystickButton(driveController, ButtonsEnumerated.BBUTTON.getValue());
		TurnToSouth = new JoystickButton(driveController, ButtonsEnumerated.ABUTTON.getValue());
		TurnToNorth = new JoystickButton(driveController, ButtonsEnumerated.YBUTTON.getValue());
		TurnToWest.whenPressed(new TurnToCompassHeading(270));
		TurnToSouth.whenPressed(new TurnToCompassHeading(180));
		TurnToNorth.whenPressed(new TurnToCompassHeading(0));
		TurnToEast.whenPressed(new TurnToCompassHeading(90));

		elevatorMoveHighScaleButton = new JoystickButton(subsystemController, ButtonsEnumerated.YBUTTON.getValue());
		elevatorMoveLowScaleButton = new JoystickButton(subsystemController, ButtonsEnumerated.XBUTTON.getValue());
		elevatorMoveSwitchButton = new JoystickButton(subsystemController, ButtonsEnumerated.BBUTTON.getValue());
		elevatorMoveGroundLevelButton = new JoystickButton(subsystemController, ButtonsEnumerated.ABUTTON.getValue());
		elevatorMoveHighScaleButton.whenPressed(new ElevatorMoveHighScale());
		elevatorMoveLowScaleButton.whenPressed(new ElevatorMoveLowScale());
		elevatorMoveSwitchButton.whenPressed(new ElevatorMoveSwitch());
		elevatorMoveGroundLevelButton.whenPressed(new ElevatorMoveGroundLevel());

		liftLeftRampButton = new JoystickButton(driveController, ButtonsEnumerated.BACKBUTTON.getValue());
		liftLeftRampButton.whenPressed(new LiftLeftRamp());
		liftRightRampButton = new JoystickButton(driveController, ButtonsEnumerated.STARTBUTTON.getValue());
		liftRightRampButton.whenPressed(new LiftRightRamp());


		// SmartDashboard Buttons
		SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
		SmartDashboard.putData("TeleOpDrive", new TeleOpDrive());
		SmartDashboard.putData("RunIntakeIn", new RunIntakeIn());
		SmartDashboard.putData("Move Using Ultrasonic", new MoveUsingFrontUltrasonic(10));



		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		SmartDashboard.putData("JawsOpenClose", new JawsOpenClose());
		SmartDashboard.putData("RetratExtendArms", new RetractExtendArms());
		SmartDashboard.putData("LEDRed", new LEDCommand(LEDColor.RED));
		SmartDashboard.putData("LEDBlue", new LEDCommand(LEDColor.BLUE));
		SmartDashboard.putData("LEDGreenishYellow", new LEDCommand(LEDColor.GREEN));
		SmartDashboard.putData("LEDRedBrightness", new LEDBrightness(LEDColor.RED));
		SmartDashboard.putData("LEDBlueBrightness", new LEDBrightness(LEDColor.BLUE));
		SmartDashboard.putData("LEDGreenBrightness", new LEDBrightness(LEDColor.GREEN));
		SmartDashboard.putData("GyroPIDTurnDeltaAngle", new GyroPIDTurnDeltaAngle());
		SmartDashboard.putData("TurnToCompassHeading", new TurnToCompassHeading(90));

		SmartDashboard.putData("MoveUsingEncoderPID", new MoveUsingEncoderPID(100));
		SmartDashboard.putData("RunMotorAndLog", new RunMotorAndLog());
		SmartDashboard.putData("Lift Left Ramp", new LiftLeftRamp());
		SmartDashboard.putData("Lift Right Ramp", new LiftRightRamp());
		SmartDashboard.putData("MotionProfilingTest", new MotionProfilingTest());
		SmartDashboard.putData("DriveSquare", new DriveSquare());

	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
	public Joystick getDriveController() {
		return driveController;
	}

	public Joystick getSubsystemController() {
		return subsystemController;
	}


	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

