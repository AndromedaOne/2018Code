// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4905.Galaktika;

import org.usfirst.frc4905.Galaktika.commands.AutonomousCommand;
import org.usfirst.frc4905.Galaktika.groupcommands.AutoCrossTheLine;
import org.usfirst.frc4905.Galaktika.groupcommands.AutoMiddleLoadSwitch;
import org.usfirst.frc4905.Galaktika.groupcommands.AutoPlayoffs;
import org.usfirst.frc4905.Galaktika.groupcommands.AutoQuals;
import org.usfirst.frc4905.Galaktika.subsystems.DriveTrain;
import org.usfirst.frc4905.Galaktika.subsystems.Elevator;
import org.usfirst.frc4905.Galaktika.subsystems.Intake;
import org.usfirst.frc4905.Galaktika.subsystems.Jaws;
import org.usfirst.frc4905.Galaktika.subsystems.Pneumatics;
import org.usfirst.frc4905.Galaktika.subsystems.Ramps;
import org.usfirst.frc4905.Galaktika.subsystems.Retractor;

import Utilities.Tracing.Trace;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in
 * the project.
 */
public class Robot extends TimedRobot {
    public static final int SWITCH = 0;
    public static final int SCALE = 1;
    private static double delaySeconds = 5.0;
	private static double distanceScaleFactor = 1.0;


  	Command autonomousCommand;
    static char initialRobotLocation = '?';
    SendableChooser<Command> chooser = new SendableChooser<>();
    SendableChooser<Character> locationChooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Intake intake;
    public static Ramps ramps;
    public static Elevator elevator;
    public static Pneumatics pneumatics;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static PowerDistributionPanel pdp = new PowerDistributionPanel();
    public static Retractor retractor;
    public static Jaws jaws;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
    		debug("top of robotInit" );
    		RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        intake = new Intake();
        ramps = new Ramps();
        elevator = new Elevator();
        pneumatics = new Pneumatics();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        retractor = new Retractor();
        jaws = new Jaws();
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        chooser.addObject("Quals", new AutoQuals(false));
        chooser.addObject("Middle Load Switch", new AutoMiddleLoadSwitch(false));
        chooser.addObject("Delayed Middle Load Switch", new AutoMiddleLoadSwitch(true));
        chooser.addObject("Cross The Line", new AutoCrossTheLine(false));
        chooser.addObject("Delayed Cross The Line", new AutoCrossTheLine(true));
        chooser.addObject("Delayed Quals", new AutoQuals(true));
        chooser.addObject("Playoffs", new AutoPlayoffs(false));
        chooser.addObject("Delayed Playoffs", new AutoPlayoffs(true));

        SmartDashboard.putData("Auto mode", chooser);
        SmartDashboard.putNumber("Autonomous Delay", delaySeconds);
        SmartDashboard.putNumber("Autonomous Scale Factor", distanceScaleFactor);
        locationChooser.addDefault("Left", 'L');
        locationChooser.addObject("Middle", 'M');
        locationChooser.addObject("Right", 'R');
        SmartDashboard.putData("Robot Position", locationChooser);
        debug("bottom of robotInit" );
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){
    	Trace.getInstance().flushTraceFiles();
    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
    		debug("top of autonomousInit");
    		delaySeconds = SmartDashboard.getNumber("Autonomous Delay", 5.0);
    		distanceScaleFactor = SmartDashboard.getNumber("Autonomous Scale Factor", 1.0);
        autonomousCommand = chooser.getSelected();
        initialRobotLocation = locationChooser.getSelected();
        debug("middle of autonomousInit - robot location = " +
        		initialRobotLocation +
        		" Scale = " + Robot.getScalePlatePosition() +
    			" Switch = " + Robot.getSwitchPlatePosition() +
        		" delaySeconds = " + delaySeconds +
        		" distanceScaleFactor = " + distanceScaleFactor +
        		" autonomousCommand " + autonomousCommand.getClass().getSimpleName());
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

	private static void debug(String information) {
		System.out.println("in Robot.java, " + information);
		System.out.flush();
	}

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();

    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    public static char getSwitchPlatePosition() {
	    	debug("top of Robot getSwitchPlatePosition");
	    	String gameData = DriverStation.getInstance().getGameSpecificMessage();
	    	if (gameData.length() <= SWITCH) {
	    		return 'L';
	    	}
	    	return gameData.charAt(SWITCH);
    }

    public static char getScalePlatePosition() {
	    	debug("top of Robot getScalePlatePosition");
	    	String gameData = DriverStation.getInstance().getGameSpecificMessage();
	    	if (gameData.length() <= SCALE) {
	    		return 'L';
	    	}
	    	return gameData.charAt(SCALE);
    }

    public static char getInitialRobotLocation() {
        if (initialRobotLocation == '?') {
    			throw new RuntimeException("Initial robot location acquired too early.");
    		}
		debug("getInitialRobotLocation returning " + initialRobotLocation);
	    	return initialRobotLocation;
    }

	public static double getAutonomousDelay() {
		debug("getAutonomousDelay returning " + delaySeconds);
		return delaySeconds;
	}

	public static double getAutonomousDistanceScaleFactor() {
		debug("getAutonomousDistanceScaleFactor returning " + distanceScaleFactor);
		return distanceScaleFactor;
	}
}
