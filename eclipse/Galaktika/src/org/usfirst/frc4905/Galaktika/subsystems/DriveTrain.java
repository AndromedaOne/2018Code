// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4905.Galaktika.subsystems;

import org.usfirst.frc4905.Galaktika.RobotMap;
import org.usfirst.frc4905.Galaktika.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import Utilities.Trace;
import Utilities.TracePair;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {
	

	
	

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX leftFrontTalon = RobotMap.driveTrainLeftFrontTalon;
    private final WPI_TalonSRX leftRearTalon = RobotMap.driveTrainLeftRearTalon;
    private final SpeedControllerGroup leftSpeedController = RobotMap.driveTrainLeftSpeedController;
    private final WPI_TalonSRX rightFrontTalon = RobotMap.driveTrainRightFrontTalon;
    private final WPI_TalonSRX rightRearTalon = RobotMap.driveTrainRightRearTalon;
    private final SpeedControllerGroup rightSpeedController = RobotMap.driveTrainRightSpeedController;
    private final DifferentialDrive differentialDrive = RobotMap.driveTrainDifferentialDrive;
    private final Compressor compressor = RobotMap.driveTrainCompressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
   
	
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	setDefaultCommand(new TeleOpDrive());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    private PIDController m_gyroPIDSource;
    private class GyroPIDIn implements PIDSource {
    	public void setPIDSourceType(PIDSourceType PIDSource) {
    		
    	}
    	public PIDSourceType getPIDSourceType() {
    		return PIDSourceType.kDisplacement;
    	}
		public double pidGet() {
			return RobotMap.navX.getRobotAngle();
		}
    }
    private class GyroPIDOut implements PIDOutput {

		@Override
		public void pidWrite(double output) {
			move(0,output);
		}
    }
    public void initGyroPIDDeltaAngle() {
    	GyroPIDIn gyroPIDIn = new GyroPIDIn();
    	GyroPIDOut gyroPIDOut = new GyroPIDOut();
    	double gyroPIDP = 0.0;
    	double gyroPIDI = 0.0;
    	double gyroPIDD = 0.0;
    	double gyroPIDF = 0.0;
    	double gyroPIDOutputRange = 1.0;
    	double gyroPIDAbsTolerance = 1;
    	m_gyroPIDSource = new PIDController(gyroPIDP, gyroPIDI, gyroPIDD, gyroPIDF, gyroPIDIn, gyroPIDOut);
    	m_gyroPIDSource.setOutputRange(-gyroPIDOutputRange, gyroPIDOutputRange);
    	m_gyroPIDSource.setAbsoluteTolerance(gyroPIDAbsTolerance);
    	
    }
    public void enableGyroPID(double setPoint) {
    	double endAngle = RobotMap.navX.getRobotAngle() + setPoint; 
    	m_gyroPIDSource.setSetpoint(endAngle);
    	m_gyroPIDSource.enable();
    	
    }
    public boolean gyroPIDIsDone() {
    	Trace.getInstance().addTrace("Gyro PID",
				new TracePair("Target", m_gyroPIDSource.getSetpoint()),
				new TracePair("Robot Angle", RobotMap.navX.getRobotAngle()), 
				new TracePair("Avg Error", m_gyroPIDSource.getError()),
				new TracePair("Output", m_gyroPIDSource.get()));
    	return m_gyroPIDSource.onTarget();
    }


    public void move(double forwardBackSpeed, double rotateAmount) {
    	differentialDrive.arcadeDrive(forwardBackSpeed, rotateAmount);
    }
    public void stop() {
    	differentialDrive.stopMotor();
    }
    
}

