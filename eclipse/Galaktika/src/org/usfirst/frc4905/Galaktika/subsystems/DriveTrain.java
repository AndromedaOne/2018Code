// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4905.Galaktika.subsystems;

import org.usfirst.frc4905.Galaktika.RobotMap;
import org.usfirst.frc4905.Galaktika.commands.TeleOpDrive;

import com.ctre.CANTalon;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX leftTopTalon = RobotMap.driveTrainLeftTopTalon;
    private final WPI_TalonSRX leftBottomTalon = RobotMap.driveTrainLeftBottomTalon;
    private final SpeedControllerGroup leftSpeedController = RobotMap.driveTrainLeftSpeedController;
    private final WPI_TalonSRX rightTopTalon = RobotMap.driveTrainRightTopTalon;
    private final WPI_TalonSRX rightBottomTalon = RobotMap.driveTrainRightBottomTalon;
    private final SpeedControllerGroup rightSpeedController = RobotMap.driveTrainRightSpeedController;
    private final DifferentialDrive differentialDrive = RobotMap.driveTrainDifferentialDrive;
    private final Compressor compressor = RobotMap.driveTrainCompressor;

    private double m_positionPIDkp = 200.0;//500.0;
	private double m_positionPIDki = 5.0;//50.0;
	private double m_positionPIDkd = 100.0;//1.0;
	private double m_positionPIDIAccum = 0.0;
	private double m_positionPIDPreviousPositionError = Double.NaN;
	private double m_positionPIDPreviousPosition = Double.NaN;
	private double iTerm = 0.0;
	private double dTerm = 0.0;
	private double pTerm = 0.0;
	private double m_positionError;
	private double m_positionPIDError;
	public double getPositionPIDError() {return m_positionPIDError;}
	public double getPreviousPositionError() {return m_positionPIDPreviousPositionError;}
	public double getPositionError() {return m_positionError;}
	public double getPTerm() {return pTerm;}
	public double getITerm() {return iTerm;}
	public double getDTerm() {return dTerm;}
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    	setDefaultCommand(new TeleOpDrive());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void move(double forwardBackSpeed, double rotateAmount) {
    	//Rotation was inverted, -rotation fixes that
    	differentialDrive.arcadeDrive(forwardBackSpeed, -rotateAmount);
    }
    public void stop() {
    	differentialDrive.stopMotor();
    }
    public void rotateToAngle(double angle) {
    	RobotMap.navX.turnWithGyroPID(angle);
    }
    
    public void setControlModeSpeed() {
		setNormalPIDParameters();
		backLeft.changeControlMode(TalonControlMode.Speed);
		backRight.changeControlMode(TalonControlMode.Speed);
		frontRight.changeControlMode(TalonControlMode.Speed);
		frontLeft.changeControlMode(TalonControlMode.Speed);
		
		backLeft.setStatusFrameRateMs(CANTalon.StatusFrameRate.Feedback, 1);
	}
    private void setNormalPIDParameters() {
		//                 P    I  D  F                       Izone RampRate Profile
		backLeft.setPID(   0.0, 0, 0, 1023.0*600.0/4096.0/800, 0,  0,       0);
		backRight.setPID(  0.0, 0, 0, 1023.0*600.0/4096.0/800, 0,  0,       0);
		frontLeft.setPID(  0.0, 0, 0, 1023.0*600.0/4096.0/800, 0,  0,       0);
		frontRight.setPID( 0.0, 0, 0, 1023.0*600.0/4096.0/800, 0,  0,       0);
		// Page 88 in CTR Documentation for f 
		
	}
    public void initializePositionPID() {
		m_positionPIDPreviousPositionError = Double.NaN;
		m_positionPIDIAccum = 0.0;
		m_positionPIDPreviousPosition = Double.NaN;
	}
	public double getPositionPIDOut(double setpoint) {
		m_positionError = setpoint - getEncoderPosition();
		
		if(Double.isNaN(m_positionPIDPreviousPosition)) {
			m_positionPIDPreviousPositionError = m_positionError;
			dTerm = 0.0;
		}else {
			m_positionPIDPreviousPositionError = setpoint - m_positionPIDPreviousPosition;
		}
		m_positionPIDIAccum += m_positionError;
		pTerm = m_positionError*m_positionPIDkp;
		iTerm = m_positionPIDIAccum*m_positionPIDki;
		if(m_positionError - m_positionPIDPreviousPositionError != 0) {
			
			dTerm = (m_positionError - m_positionPIDPreviousPositionError)*m_positionPIDkd;
			
		} else {
			
		}
		m_positionPIDPreviousPosition = getEncoderPosition();
		m_positionPIDError = m_positionError;
		return pTerm + iTerm + dTerm;
	}
	
	public double getEncoderPosition() {
		return backLeft.getPosition();
	}
	public double getVelocity() {
		return backLeft.getSpeed();
		
	}
}

