// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4905.Galaktika.subsystems;

import org.usfirst.frc4905.Galaktika.Robot;
import org.usfirst.frc4905.Galaktika.RobotMap;
import org.usfirst.frc4905.Galaktika.commands.RunIntakeIn;

import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Intake extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftController = RobotMap.intakeLeftController;
    private final SpeedController rightController = RobotMap.intakeRightController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
      
    // CHANGE THIS BACK!!! I ONLY CHANGED THIS BECAUSE I NEEDED TO COMMENT OUT THE MOTORS TO GET RID OF ERRORS
    	
    	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        setDefaultCommand(new RunIntakeIn());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void runIntake(double speed) {
    	
    	int kUltrasonicDistanceCubeIn = 5;
    	if((RobotMap.driveTrainFrontUltrasonic.getRangeInches() <= kUltrasonicDistanceCubeIn) &&
    			!Utilities.ControllerButtons.ButtonsEnumerated.getStartButton(Robot.oi.getSubsystemController())) {
    		stopIntake();
    	} else {
    		leftController.set(speed);
    		rightController.set(-speed);
    	}
    	
    	
    }
    
   public void stopIntake() {
	   leftController.set(0);
	   rightController.set(0);
   }
   public void reverseIntake(double speed) {
	   leftController.set(speed);
	   rightController.set(speed);
   }
    

}
